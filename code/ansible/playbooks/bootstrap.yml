---
- name: Bootstrap virtual servers
  hosts: all
  user: sshadmin
  become: yes
  gather_facts: yes

  handlers:
    - import_tasks: ../handlers/main.yml
  
  pre_tasks:
    - name: "Install linux-modules-extra-{{ ansible_kernel }}"
      package:
        name: 
          - "linux-modules-extra-{{ ansible_kernel }}"
        state: present
      notify: reboot server
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: "Install linux-image--{{ ansible_kernel }}"
      package:
        name: 
          - "linux-image-{{ ansible_kernel }}"
        state: present
      notify: reboot server
      when: ansible_facts['distribution'] == "Debian"

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  tasks:

    - name: Create mountpoints
      file:
        path: "{{ item }}"
        recurse: no
        state: directory
        mode: 0770
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
      with_items:
        - "/mnt/volumes"
        - "/mnt/volumes/nfs"
        - "/mnt/volumes/persistent_storage"
        - "/mnt/volumes/backup"

### Prod only VVVV ############################## (TBD: move to a separate file(?))

    - name: Mount Production storage
      block:
      - name: Mount data disk
        mount:
          path: "/mnt/volumes/nfs"
          src: "/dev/{{ data_disk }}"
          fstype: ext4
          state: mounted
      when: 
        - system_env == "prod"
        - "'vservers' in group_names"

    - name: Mount Backup storage
      block:
      - name: Create a new primary partition on backup_disk disk
        parted:
          device: "/dev/{{ backup_disk | regex_replace('1$', '') }}"
          number: 1
          state: present

      - name: Create a ext4 filesystem on backup disk
        filesystem:
          fstype: ext4
          dev: "/dev/{{ backup_disk }}"

      - name: Mount backup_disk disk
        mount:
          path: "/mnt/volumes/backup"
          src: "/dev/{{ backup_disk }}"
          fstype: ext4
          state: mounted
      when: 
        - system_env == "prod"
        - "'vsupport' in group_names"

### Prod only ^^^^ ##############################

    - name: Change Docker service - Create folder
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        recurse: yes

    - name: Ensure Update packages is disabled
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: '^APT::Periodic::Update-Package-Lists'
        line: APT::Periodic::Update-Package-Lists "0";

    - name: Ensure Unattended upgrade is disabled
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: '^APT::Periodic::Unattended-Upgrade'
        line: APT::Periodic::Unattended-Upgrade "0";

    - name: Change Docker service - Copy service file
      copy:
        src: files/startup_options.conf
        dest: /etc/systemd/system/docker.service.d/startup_options.conf
        mode: '0644'
      register: docker_api
      notify:
        - systemd reload
        - docker restart

    - name: Load Ansible managed kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - cdc_acm
        - nfs
        - nfsd
    
    - name: Create kernel modules file
      file:
        path: /etc/modules-load.d/ansible_managed.conf
        state: touch

    - name: Set Ansible managed kernel modules to be persinsent
      lineinfile:
        path: /etc/modules-load.d/ansible_managed.conf
        state: present
        line: "{{ item }}"
      with_items:
        - nfs
        - nfsd

    - meta: flush_handlers

########## Portainer ############################

    - name: Portainer
      docker_container:
        name: portainer
        image: portainer/portainer-ee:latest
        labels:
          com.centurylinklabs.watchtower.enable: "true"
          com.centurylinklabs.watchtower.scope: vsupport01
        state: started
        restart_policy: always
        security_opts:
          - no-new-privileges:true
        volumes:
          - /etc/localtime:/etc/localtime:ro
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - portainer-data:/data
        ports:
          - 9000:9000
      when: 
        - "'vsupport' in group_names"

########## Prune Docker #########################
    - name: Copy PruneDocker service
      copy:
        src: files/PruneDocker.service
        dest: /etc/systemd/system/PruneDocker.service
      tags:
        - prunedocker

    - name: Copy PruneDocker timer
      copy:
        src: files/PruneDocker.timer
        dest: /etc/systemd/system/PruneDocker.timer
      tags:
        - prunedocker

    - name: Enable PruneDocker service
      systemd:
        name: PruneDocker.timer
        state: started
        enabled: yes
      tags:
        - prunedocker
